var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://github.com/mdewcm2023/site-scrum-1   \n https://mdewcm2023.github.io/site-scrum-1', 'tags': '', 'url': 'About.html'}, {'title': 'Upload_image', 'text': 'using  pica javascript library  to resize the image integrated with Brython before sending to Flask \n from browser import document, window, ajax\n \ndef on_complete(req):\n    if req.status == 200 or req.status == 0:\n        print("File uploaded successfully")\n    else:\n        print("Error uploading file")\n \ndef upload_file(file):\n    req = ajax.ajax()\n    req.bind("complete", on_complete)\n    req.open("POST", "/upload", True)\n    req.set_header("Content-Type", "application/octet-stream")\n    req.send(file)\n \ndef resize_image(file):\n    pica = window.pica\n    img = document.createElement("img")\n    img.src = window.URL.createObjectURL(file)\n    canvas = document.createElement("canvas")\n    max_size = 800\n    if img.width > max_size or img.height > max_size:\n        if img.width > img.height:\n            canvas.width = max_size\n            canvas.height = max_size * img.height / img.width\n        else:\n            canvas.height = max_size\n            canvas.width = max_size * img.width / img.height\n    else:\n        canvas.width = img.width\n        canvas.height = img.height\n \n    def on_resize(result):\n        resized_image_data = result.toDataURL("image/jpeg").split(",")[1]\n        upload_file(resized_image_data)\n \n    pica.resize(img, canvas).then(on_resize)\n \ndef handle_files(event):\n    file = event.target.files[0]\n    resize_image(file)\n \ninput = document.createElement("input")\ninput.type = "file"\ninput.accept = "image/*"\ninput.capture = "camera"\ninput.bind("change", handle_files)\ndocument <= input \n', 'tags': '', 'url': 'Upload_image.html'}, {'title': 'Brython_Flask', 'text': 'Flask form \n from flask import Flask, render_template, request\nimport json\n\napp = Flask(__name__)\n\n@app.route("/")\ndef index():\n    return render_template("index.html")\n\n@app.route("/upload", methods=["POST"])\ndef upload():\n    data = json.loads(request.form["data"])\n    filename = data["filename"]\n    image_data = data["data"]\n    # Save the resized image to the server here\n    # ...\n    return "File uploaded successfully!"\n\nif __name__ == "__main__":\n    app.run() \n index.html \n <!DOCTYPE html>\n<html>\n  <head>\n    <script type="text/javascript" src="./../cmsimde/static/brython.js"></script>\n    <script type="text/javascript" src="./../cmsimde/static/brython_stdlib.js"></script>\n  </head>\n  <body onload="brython()">\n    <input type="file" id="file-upload" accept="image/*" capture="camera">\n    <button id="upload-btn">Upload</button>\n    <script type="text/python" src="./../cmsimde/static/upload.py"></script>\n  </body>\n</html> \n Brython side \n from browser import document, ajax\nimport json\n\ndef on_complete(req):\n    if req.status == 200 or req.status == 0:\n        alert("File uploaded successfully!")\n    else:\n        alert("Error uploading file")\n\ndef upload_file(evt):\n    file = document["file-upload"].files[0]\n    # Use pica.js to resize the image here\n    # ...\n    data = {\n        "filename": file.name,\n        "data": resized_image_data\n    }\n    req = ajax.ajax()\n    req.bind("complete", on_complete)\n    req.open("POST", "/upload", True)\n    req.set_header("content-type", "application/x-www-form-urlencoded")\n    req.send({"data": json.dumps(data)})\n\ndocument["upload-btn"].bind("click", upload_file) \n Complete Brython side \n <!DOCTYPE html>\n<html>\n  <head>\n    <script type="text/javascript" src="./../cmsimde/static/brython.js"></script>\n    <script type="text/javascript" src="./../cmsimde/static/brython_stdlib.js"></script>\n    <script type="text/javascript" src="./../cmsimde/static/pica.min.js"></script>\n  </head>\n  <body onload="brython()">\n    <input type="file" id="file-upload" accept="image/*">\n    <button id="upload-btn">Upload</button>\n    <img id="preview">\n    <script type="text/python" src="./../cmsimde/static/upload.py"></script>\n  </body>\n</html> \n Brython side \n from browser import document, window, ajax\nfrom javascript import JSConstructor\nimport json\n\npica = JSConstructor(window.pica)\n\ndef on_complete(req):\n    if req.status == 200 or req.status == 0:\n        alert("File uploaded successfully!")\n    else:\n        alert("Error uploading file")\n\ndef resize_image(file):\n    # Create a canvas element to draw the image on\n    canvas = document.createElement("canvas")\n    canvas.width = 300\n    canvas.height = 300\n    ctx = canvas.getContext("2d")\n\n    # Create an image element to hold the uploaded file\n    img = document.createElement("img")\n\n    def on_image_load(evt):\n        # Draw the uploaded image onto the canvas\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n        # Use pica to resize the image\n        pica.resize(img, canvas).then(lambda result: pica.toBlob(result).then(send_data))\n\n    img.bind("load", on_image_load)\n    img.src = window.URL.createObjectURL(file)\n\ndef send_data(blob):\n    # Convert the blob to a data URL and set it as the src of the preview image\n    reader = window.FileReader.new()\n    reader.readAsDataURL(blob)\n    reader.bind("loadend", lambda evt: (document["preview"].src = reader.result))\n\ndef upload_file(evt):\n    file = document["file-upload"].files[0]\n    resize_image(file)\n\ndocument["upload-btn"].bind("click", upload_file) \n Flask side to save uploaded file \n from flask import Flask, request\nimport os\nfrom werkzeug.utils import secure_filename\n\napp = Flask(__name__)\napp.config["UPLOAD_FOLDER"] = "/path/to/upload/folder"\n\n@app.route("/upload", methods=["POST"])\ndef upload():\n    file = request.files["file"]\n    filename = secure_filename(file.filename)\n    file.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))\n    return "File uploaded successfully!"\n\nif __name__ == "__main__":\n    app.run() \n', 'tags': '', 'url': 'Brython_Flask.html'}]};